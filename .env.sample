# If you want, you can run:
# $ docker compose up redis postgres
# $ bundle exec rails s
# I know for some people it's a little more performant :)
REDIS_URL=redis://@127.0.0.1:6379/1
DATABASE_URL=postgres://postgres:postgres@127.0.0.1:5432/

# URL=pigciapp.test
URL=127.0.0.1
# ASSET_HOST=https://cdn.pigciapp.test/
LANG=en_US.UTF-8
EDITOR=vim
# RACK_ENV=production
# RAILS_ENV=production
# RAILS_LOG_TO_STDOUT=enabled
# RAILS_SERVE_STATIC_FILES=enabled

# In local dev, don't force SSL
SKIP_CSP_UPGRADE_INSECURE_REQUESTS=enabled

# In production, enable these to auto run migrations.
# DURING_RELEASE_SEED_DB=true
# DURING_RELEASE_RUN_MIGRATIONS=true

# Puma-dev: You need to define this otherwise it uses it's own puma.rb file.
# CONFIG=config/puma.rb

## puma-ngrok-tunnel setup
## These should start with 'export' otherwise puma-dev won't use them.
# export NGROK_SUBDOMAIN=pigciapp
# export NGROK_REGION=eu
## The URL (and HTTPS Port) you might use to access this under Puma-dev
# export NGROK_ADDR=pigciapp.test:443
# export NGROK_HOST_HEADER=webhook.pigciapp.test

# Grab these from their source.
RAILS_MASTER_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# PigCI - Don't need these anymore
# PIG_CI_API_BASE_URL=https://api.pigciapp.test/api
# PIG_CI_API_SKIP_VERIFY_SSL=true
